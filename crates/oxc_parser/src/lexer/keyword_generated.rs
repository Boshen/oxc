use crate::lexer::Kind;
#[allow(clippy::enum_glob_use)]
use crate::lexer::Kind::*;

mod hash {
    /// Concatenate the first 2 bytes and the last 2 bytes of a slice into a single
    /// 32-bit integer as an efficient hashing function of JS keywords.
    /// This approach is backed by the observation that the byte-sequence formed by taking
    /// the first 2 and last 2 bytes of JS keywords are unique.
    ///
    /// SAFETY:
    /// key.len() >= 2
    #[inline]
    pub unsafe fn extract_first_and_last_two_bytes(key: &[u8]) -> u32 {
        unsafe fn read_u16(input: &[u8]) -> u16 {
            u16::from(*input.get_unchecked(0)) << 8 | u16::from(*input.get_unchecked(1))
        }
        // read first 2 bytes in a u16
        let first = read_u16(key);
        let last_bytes = &key[key.len() - 2..];
        let last = read_u16(last_bytes);
        u32::from(first) | u32::from(last) << 16
    }

    /// Use a multiplicative linear congruential generator (MLCG) to map the hash value
    /// uniformly. Different values of seed are tested to find one with no collisions.
    #[inline]
    pub fn hash_u32(input: u32, seed: u32) -> u32 {
        // The Magic number is taken from
        // https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00996-5/S0025-5718-99-00996-5.pdf
        const MAGIC: u64 = 887_987_685;
        let hash = input ^ seed;
        ((u64::from(hash) * MAGIC) >> 32) as u32
    }
}

const HASH_TABLE_SIZE: usize = 512usize;
const HASH_TABLE_SEED: u32 = 7_484_039u32;
static KEYWORD_HASH_TABLE: [(Kind, &'static str); HASH_TABLE_SIZE] = [
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Export, "export"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Enum, "enum"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (With, "with"),
    (Default, "default"),
    (BigInt, "bigint"),
    (Ident, ""),
    (Out, "out"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Case, "case"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Readonly, "readonly"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Infer, "infer"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Finally, "finally"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Constructor, "constructor"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Interface, "interface"),
    (Ident, ""),
    (While, "while"),
    (Ident, ""),
    (Void, "void"),
    (Const, "const"),
    (Global, "global"),
    (Ident, ""),
    (Ident, ""),
    (Override, "override"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Let, "let"),
    (Set, "set"),
    (Ident, ""),
    (Ident, ""),
    (Never, "never"),
    (Ident, ""),
    (Ident, ""),
    (Number, "number"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Intrinsic, "intrinsic"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Do, "do"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Undefined, "undefined"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (KeyOf, "keyof"),
    (Ident, ""),
    (Namespace, "namespace"),
    (Get, "get"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Await, "await"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Typeof, "typeof"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Yield, "yield"),
    (Ident, ""),
    (Private, "private"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (In, "in"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Throw, "throw"),
    (Break, "break"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Extends, "extends"),
    (Ident, ""),
    (Accessor, "accessor"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (False, "false"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Delete, "delete"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Import, "import"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Super, "super"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Symbol, "symbol"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (String, "string"),
    (Abstract, "abstract"),
    (Ident, ""),
    (Async, "async"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Meta, "meta"),
    (Ident, ""),
    (Function, "function"),
    (For, "for"),
    (Ident, ""),
    (Ident, ""),
    (Instanceof, "instanceof"),
    (Ident, ""),
    (Ident, ""),
    (Object, "object"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Var, "var"),
    (Require, "require"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Type, "type"),
    (Ident, ""),
    (As, "as"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Catch, "catch"),
    (Ident, ""),
    (Ident, ""),
    (New, "new"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Static, "static"),
    (Ident, ""),
    (True, "true"),
    (Ident, ""),
    (Ident, ""),
    (Try, "try"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Assert, "assert"),
    (Ident, ""),
    (Ident, ""),
    (Unknown, "unknown"),
    (Debugger, "debugger"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (If, "if"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (This, "this"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Unique, "unique"),
    (Public, "public"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Any, "any"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Of, "of"),
    (Ident, ""),
    (Continue, "continue"),
    (Ident, ""),
    (Ident, ""),
    (Else, "else"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Implements, "implements"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Target, "target"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Boolean, "boolean"),
    (Ident, ""),
    (Ident, ""),
    (Protected, "protected"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Declare, "declare"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Null, "null"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Is, "is"),
    (Ident, ""),
    (Package, "package"),
    (Ident, ""),
    (Return, "return"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Module, "module"),
    (Ident, ""),
    (Class, "class"),
    (Ident, ""),
    (From, "from"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Switch, "switch"),
    (Asserts, "asserts"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Satisfies, "satisfies"),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
    (Ident, ""),
];

#[inline]
pub fn table_match_keyword(s: &str) -> Kind {
    let slice = s.as_bytes();
    let extract = unsafe { hash::extract_first_and_last_two_bytes(slice) };
    let hash_code = hash::hash_u32(extract, HASH_TABLE_SEED);
    let idx = hash_code as usize % HASH_TABLE_SIZE;
    let (mut kind, key) = KEYWORD_HASH_TABLE[idx];
    if s.len() != key.len() || s != key {
        kind = Ident;
    }
    kind
}
