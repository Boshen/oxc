var searchIndex = JSON.parse('{\
"oxc_allocator":{"doc":"","t":[3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Allocator","Box","String","Vec","add","add_assign","as_bytes","as_mut_str","as_mut_vec","as_ref","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bump","capacity","clear","clone","clone_from","clone_into","cmp","default","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend","extend","extend","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_iter_in","from_iter_in","from_iter_in","from_raw_parts_in","from_str_in","from_utf16_in","from_utf8","from_utf8_lossy_in","from_utf8_unchecked","hash","hash","hash","index","index","index","index","index","index","index_mut","index_mut","index_mut","index_mut","index_mut","index_mut","insert","insert_str","into","into","into","into","into_bump_str","into_bytes","into_inner","into_iter","into_iter","is_empty","is_empty","len","new_in","new_in","partial_cmp","pop","push","push_str","remove","replace_range","reserve","reserve_exact","retain","serialize","serialize","shrink_to_fit","split_off","to_owned","to_string","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","unbox","with_capacity_in","with_capacity_in","write_char","write_str"],"q":["oxc_allocator","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","Bumpalo Box","A UTF-8 encoded, growable string.","Bumpalo Vec","","","Returns a byte slice of this <code>String</code>’s contents.","Converts a <code>String</code> into a mutable string slice.","Returns a mutable reference to the contents of this <code>String</code>.","","","Extracts a string slice containing the entire <code>String</code>.","","","","","","","","","","","Returns a shared reference to the allocator backing this …","Returns this <code>String</code>’s capacity, in bytes.","Truncates this <code>String</code>, removing all contents.","","","","","","","","","","","","","Creates a draining iterator that removes the specified …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Construct a new <code>String&lt;&#39;bump&gt;</code> from an iterator of <code>char</code>s.","","Creates a new <code>String</code> from a length, capacity, and pointer.","Construct a new <code>String&lt;&#39;bump&gt;</code> from a string slice.","Decode a UTF-16 encoded slice <code>v</code> into a <code>String</code>, returning …","Converts a vector of bytes to a <code>String</code>.","Converts a slice of bytes to a string, including invalid …","Converts a vector of bytes to a <code>String</code> without checking …","","","","","","","","","","","","","","","","Inserts a character into this <code>String</code> at a byte position.","Inserts a string slice into this <code>String</code> at a byte position.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Convert this <code>String&lt;&#39;bump&gt;</code> into a <code>&amp;&#39;bump str</code>. This is …","Converts a <code>String</code> into a byte vector.","","","","","Returns <code>true</code> if this <code>String</code> has a length of zero.","Returns the length of this <code>String</code>, in bytes.","","Creates a new empty <code>String</code>.","","Removes the last character from the string buffer and …","Appends the given <code>char</code> to the end of this <code>String</code>.","Appends a given string slice onto the end of this <code>String</code>.","Removes a <code>char</code> from this <code>String</code> at a byte position and …","Removes the specified range in the string, and replaces it …","Ensures that this <code>String</code>’s capacity is at least …","Ensures that this <code>String</code>’s capacity is <code>additional</code> bytes …","Retains only the characters specified by the predicate.","","","Shrinks the capacity of this <code>String</code> to match its length.","Splits the string into two at the given index.","","","Shortens this <code>String</code> to the specified length.","","","","","","","","","","","","","","","Creates a new empty <code>String</code> with a particular capacity.","",""],"i":[0,0,0,0,1,1,1,1,1,1,1,1,9,10,7,1,1,9,10,7,1,1,1,1,1,1,1,1,1,7,9,10,7,1,9,10,1,1,9,10,1,1,1,1,1,1,1,1,1,1,1,9,10,7,1,1,9,10,7,1,10,1,1,1,1,1,1,1,1,9,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,9,10,7,1,1,1,10,10,10,10,1,1,10,1,1,1,1,1,1,1,1,1,1,9,10,1,1,1,1,1,9,10,7,1,9,10,7,1,9,10,7,1,9,10,1,1,1],"f":[0,0,0,0,[[1,2],1],[[1,2]],[1],[1,2],[1,3],[1],[1,2],[1,2],[[]],[[]],[[]],[[]],[1,2],[[]],[[]],[[]],[1,2],[[]],[1,4],[1,5],[1],[1,1],[[1,1]],[[]],[[1,1],6],[[],7],[[[9,[8]]]],[10],[7],[1,2],[[[9,[8]]]],[10,3],[1,2],[1,11],[[9,9],12],[[[10,[13]],10],12],[[1,2],12],[[1,14],12],[[1,2],12],[[1,15],12],[[1,1],12],[1],[1],[1],[1],[1],[1],[[[9,[[0,[8,16]]]],17],18],[[[10,[16]],17],18],[[7,17],18],[[1,17],[[20,[19]]]],[[1,17],[[20,[19]]]],[[]],[[]],[[]],[[]],[[21,7],10],[4,1],[[],1],[[22,5,5,4],1],[[2,4],1],[4,[[20,[1,23]]]],[[[3,[22]]],[[20,[1,24]]]],[4,1],[[[3,[22]]],1],[[[9,[25]]]],[[[10,[25]]]],[1],[[1,[26,[5]]],2],[[1,27],2],[[1,[28,[5]]],2],[[1,[29,[5]]],2],[[1,[30,[5]]],2],[[1,[31,[5]]],2],[[1,[26,[5]]],2],[[1,[31,[5]]],2],[[1,[29,[5]]],2],[[1,[28,[5]]],2],[[1,[30,[5]]],2],[[1,27],2],[[1,5,32]],[[1,5,2]],[[]],[[]],[[]],[[]],[1,2],[1,[[3,[22]]]],[10,3],[10],[10],[10,12],[1,12],[1,5],[7,10],[4,1],[[1,1],[[33,[6]]]],[1,[[33,[32]]]],[[1,32]],[[1,2]],[[1,5],32],[[1,2]],[[1,5]],[[1,5]],[1],[9,20],[10,20],[1],[[1,5],1],[[]],[[],14],[[1,5]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],34],[[],34],[[],34],[[],34],[9],[[5,7],10],[[5,4],1],[[1,32],[[20,[19]]]],[[1,2],[[20,[19]]]]],"p":[[3,"String"],[15,"str"],[3,"Vec"],[3,"Bump"],[15,"usize"],[4,"Ordering"],[3,"Allocator"],[8,"Sized"],[3,"Box"],[3,"Vec"],[3,"Drain"],[15,"bool"],[8,"PartialEq"],[3,"String"],[4,"Cow"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[3,"Error"],[4,"Result"],[8,"IntoIterator"],[15,"u8"],[3,"FromUtf16Error"],[3,"FromUtf8Error"],[8,"Hash"],[3,"RangeInclusive"],[3,"RangeFull"],[3,"RangeTo"],[3,"RangeFrom"],[3,"Range"],[3,"RangeToInclusive"],[15,"char"],[4,"Option"],[3,"TypeId"]]},\
"oxc_ast":{"doc":"AST","t":[6,3,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Atom","SourceType","Span","borrow","borrow_mut","builder","clone","clone_into","default","eq","fmt","from","from_path","hash","into","is_javascript","is_jsx","is_module","is_script","is_typescript","is_typescript_definition","module_kind","set_jsx","set_module","set_script","set_typescript","set_typescript_definition","to_owned","try_from","try_into","type_id"],"q":["oxc_ast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","Returns the argument unchanged.","Converts file path to <code>SourceType</code> returns …","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,0,0,[[]],[[]],0,[1,1],[[]],[[],1],[[1,1],2],[[1,3],4],[[]],[[[6,[5]]],[[7,[1,0]]]],[1],[[]],[1,2],[1,2],[1,2],[1,2],[1,2],[1,2],0,[1],[1],[1],[1],[1],[[]],[[],7],[[],7],[[],8]],"p":[[3,"SourceType"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Path"],[8,"AsRef"],[4,"Result"],[3,"TypeId"]]},\
"oxc_coverage":{"doc":"","t":[3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,12,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AppArgs","Suite","Test262Case","Test262Suite","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","coverage_report","coverage_report","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","detail","diff","drop","drop","drop","filter","fmt","from","from","from","get_test_cases","get_test_cases","get_test_root","get_test_root","init","init","init","into","into","into","new","print_coverage","print_coverage","project_root","read_metadata","read_test_cases","read_test_cases","run","run","save_test_cases","save_test_cases","skip_test_path","skip_test_path","snapshot_errors","snapshot_errors","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":["oxc_coverage","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","A Test Suite is responsible for reading code from a …","","","","","","","","","","","","","","","","","","","","Print mismatch diff","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Errors","Errors","Panics","Errors","","","","","","","","","Errors","Errors","","","","","","","","",""],"i":[0,0,0,0,1,14,2,1,14,2,15,15,1,2,1,14,2,1,14,2,2,2,1,14,2,2,2,1,14,2,15,1,15,1,1,14,2,1,14,2,1,15,15,0,14,15,15,15,15,15,1,15,1,15,15,1,14,2,1,14,2,1,14,2],"f":[0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],[[1,[0]]]],[[],2],[3],[3],[3],[3],[3],[3],0,0,[3],[3],[3],0,[[2,4],5],[[]],[[]],[[]],[[],6],[[[1,[0]]],6],[[],7],[[[1,[0]]],7],[[],3],[[],3],[[],3],[[]],[[]],[[]],[[],[[1,[0]]]],0,0,[[],10],[8,[[9,[0]]]],[2],[2],[[8,2]],[[8,2]],[6],[[[1,[0]],[6,[0]]]],[7,11],[[[1,[0]],7],11],0,0,[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13],[[],13]],"p":[[3,"Test262Suite"],[3,"AppArgs"],[15,"usize"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[3,"Path"],[15,"str"],[6,"Result"],[3,"PathBuf"],[15,"bool"],[4,"Result"],[3,"TypeId"],[3,"Test262Case"],[8,"Suite"]]},\
"oxc_diagnostics":{"doc":"All Parser / Linter Diagnostics","t":[4,3,13,13,13,13,13,13,13,13,13,13,13,6,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Diagnostic","Diagnostics","EscapedKeyword","ExpectToken","InvalidCharacter","InvalidEscapeSequence","InvalidNumber","InvalidNumberEnd","NonOctalDecimalEscapeSequence","Panic","RegExpFlag","RegExpFlagTwice","RegExpFlagUAndV","Result","UnexpectedEnd","UnexpectedToken","UnicodeEscapeSequence","UnterminatedMultiLineComment","UnterminatedRegExp","UnterminatedString","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deref","fmt","fmt","fmt","from","from","into","into","into_inner","labels","provide","to_compact_string","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id"],"q":["oxc_diagnostics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Panics","","","","","","","","","","","",""],"i":[0,0,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,1,2,1,2,1,2,1,2,1,1,1,2,2,1,2,1,2,1,2,2,2,1,2,2,1,2,1,2,1,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[1,1],[2,2],[[]],[[]],[[],1],[1],[[1,3],4],[[2,3],4],[[2,3],4],[[]],[[]],[[]],[[]],[1,[[5,[2]]]],[2,[[8,[[7,[6]]]]]],[9],[[],10],[[]],[[]],[[],11],[[],12],[[],12],[[],12],[[],12],[[],13],[[],13]],"p":[[3,"Diagnostics"],[4,"Diagnostic"],[3,"Formatter"],[6,"Result"],[3,"Vec"],[8,"Iterator"],[3,"Box"],[4,"Option"],[3,"Demand"],[3,"CompactString"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"oxc_parser":{"doc":"","t":[3,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Lexer","borrow","borrow_mut","checkpoint","context","from","into","lookahead","new","next_jsx_identifier","next_regex","next_right_angle","next_template_substitution_tail","next_token","re_lex_as_typescript_l_angle","re_lex_as_typescript_r_angle","remaining","rewind","try_from","try_into","type_id"],"q":["oxc_parser","","","","","","","","","","","","","","","","","","","",""],"d":["","","","Creates a checkpoint storing the current lexer state.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Find the nth lookahead token lazily","","Expand the current token for <code>JSXIdentifier</code>","Re-tokenize the current <code>/</code> or <code>/=</code> and return <code>RegExp</code> See …","","Re-tokenize the current <code>}</code> token for …","Main entry point","Re-tokenize ‘&lt;&lt;’ or ‘&lt;=’ or ‘&lt;&lt;=’ to ‘&lt;’","Re-tokenize ‘&gt;&gt;’ or ‘&gt;=’ or ‘&gt;&gt;&gt;’ or ‘&gt;&gt;=’ …","","Rewinds the lexer to the same state as when the passed in …","","",""],"i":[0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"f":[0,[[]],[[]],0,0,[[]],[[]],0,[[3,4,5,6],1],0,0,0,0,0,0,0,[1,4],0,[[],7],[[],7],[[],8]],"p":[[3,"Lexer"],[15,"usize"],[3,"Allocator"],[15,"str"],[3,"Diagnostics"],[3,"SourceType"],[4,"Result"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
